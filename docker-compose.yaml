version: '3.8'
services:
  hyperswitch:
    image: coolify/hyperswitch:latest
    container_name: hyperswitch_app
    restart: unless-stopped
    ports:
      - '${APP_PORT}:9000'
    networks:
      - hyperswitch-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - 'DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}'
      - 'REDIS_URL=redis://redis:6379'
      - 'HOST=${HOST}'
      - 'HYPERSWITCH_ADMIN_API_KEY=${HYPERSWITCH_ADMIN_API_KEY}'
      - 'HYPERSWITCH_API_KEY=${HYPERSWITCH_API_KEY}'
    labels:
      - traefik.enable=true
      - 'traefik.http.routers.hyperswitch.rule=Host(`${HOST}`)'
      - traefik.http.routers.hyperswitch.entrypoints=websecure
      - traefik.http.routers.hyperswitch.tls.certresolver=letsencrypt
      - traefik.http.services.hyperswitch.loadbalancer.server.port=9000
  postgres:
    image: 'postgres:15-alpine'
    container_name: hyperswitch_db
    restart: unless-stopped
    networks:
      - hyperswitch-net
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    environment:
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_DB=${POSTGRES_DB}'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: 'redis:7-alpine'
    container_name: hyperswitch_redis
    restart: unless-stopped
    networks:
      - hyperswitch-net
volumes:
  postgres-data:
    driver: local
networks:
  hyperswitch-net:
    driver: bridge
